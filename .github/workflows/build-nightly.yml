name: ezytdl nightly distributable build
run-name: ${{ github.actor }} - ${{ github.event_name }} - ${{ github.sha }}

on:
  schedule:
    - cron: "0 11 * * *" # 6am cst (i'll probably be asleep and have pushed a working change by then)
  workflow_dispatch:

jobs:
  check_date:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ env.should_run }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - id: should_run
        continue-on-error: true
        name: check if there have been more than 0 commits since last tag
        run: |
          commits_since_last_tag=$(git rev-list $(git describe --tags --abbrev=0)..HEAD --count)
          echo "$commits_since_last_tag commits since last tag"
          echo "should_run=$(if (( $commits_since_last_tag > 0 )); then echo "true"; else echo "false"; fi)" >> "$GITHUB_ENV"

  release_info:
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}
    runs-on: ubuntu-latest
    name: Create release tag

    permissions: write-all

    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2
      - name: Get the pre-release tag
        id: get_tag
        run: |
          echo "TAG_NAME=$(node -e "console.log(require('./package.json').version)")-nightly.$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
          echo "RELEASE_NAME=[NIGHTLY] $(node -e "console.log(require('./package.json').version)")-nightly.$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
          echo "$(git log --pretty=oneline $(git rev-list -n 1 $(git describe --tags --abbrev=0))...$(git rev-parse HEAD))" > body.txt
      - name: Create pre-release draft
        id: create_release
        uses: shogo82148/actions-create-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          commitish: ${{ github.sha }}
          draft: true
          prerelease: true
          make_latest: false
          body_path: body.txt

  linux-dist:
    needs: release_info

    runs-on: ubuntu-latest

    permissions: write-all

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install Node.js & NPM
        uses: actions/setup-node@main
        with:
          node-version: "18"

      - name: Install npm deps
        run: |
          npm install

      - name: Build app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run nightly
  macos-dist:
    needs: release_info

    runs-on: macos-latest

    permissions: write-all

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install Node.js & NPM
        uses: actions/setup-node@main
        with:
          node-version: "18"

      - name: Install npm deps
        run: |
          npm install

      - name: Build app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.MAC_CERTS }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_KEY }}
        run: |
          npm run nightly
  windows-dist:
    needs: release_info

    runs-on: windows-latest

    permissions: write-all

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install Node.js & NPM
        uses: actions/setup-node@main
        with:
          node-version: "18"

      - name: Install npm deps
        run: |
          npm install

      - name: Build app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run nightly
  release:
    needs: [linux-dist, macos-dist, windows-dist, release_info]
    name: "Release the build"
    runs-on: "ubuntu-latest"

    permissions: write-all

    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.release_info.outputs.release_id }}
      - uses: dev-drprasad/delete-older-releases@v0.2.1
        with:
          keep_latest: 3
          delete_tags: true
          delete_tag_pattern: nightly
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
